<!DOCTYPE html>
<html>
<head lang="en">
    <meta charset="UTF-8">
    <title></title>
    <script type="text/javascript" src="/javascripts/adProvider.js"></script>
    <link href="/stylesheets/style.css" type="text/css" rel="stylesheet" />
</head>
<body>
<video id = "player" autoplay></video>
<div class = "box"></div>
<div class = "box fade"></div>

<script>
    var Player = {
        video: {},
        mid: 1,
        init: function (mid) {
            this.mid = mid;
            this.video = document.getElementById('player');
            this.video.addEventListener("ended", this.playNext.bind(this));
        },
        playNext: function () {
            fetch('/content/' + this.mid + '/local').then(response => response.json()).then( params => {
                this.video.src = params.videoId;
                this.video.play().then(_ => {
                    console.log(arguments);
                }).catch(function(error) {
                    console.log(error);
                });
            });
        }
    };
    var mid = AdProvider.getMonitorId();

    Player.init(mid);
    Player.playNext();

    AdProvider.play({
        listeners: {
            updated: (banner) => {

            }
        }
    });



    //player.currentTime = 690;

    //suspend The suspend event is fired when media data loading has been suspended.

    // abort - The abort event is fired when the loading of a resource has been aborted.
    // ended - The ended event is fired when playback or streaming has stopped because the end of the media was reached or because no further data is available.
    // error - The HTMLMediaElement.error is the MediaError object for the most recent error, or null if there has not been an error. When an error event is received by the element, you can determine details about what happened by examining this object.


    /*player.addEventListener("timeupdate", function(){
     if(this.currentTime >= 10) {
     this.pause();
     }
     });*/

</script>
</body>
</html>