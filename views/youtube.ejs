<!DOCTYPE html>
<html>
<head>
    <meta name="mobile-web-app-capable" content="yes">
    <script type="text/javascript" src="/javascripts/adProvider.js"></script>
    <link href="/stylesheets/style.css" type="text/css" rel="stylesheet" />
</head>

<body>
<!-- 1. The <iframe> (and video player) will replace this <div> tag. -->


<!--div class="box" id="two">РЕКЛАМА</div>
<div class="box" id="stop">stop</div>
<div class="box" id="start">start</div-->
<div id="player"></div>
<div class="box"></div>
<div class="box fade"></div>

<script>
    // 2. This code loads the IFrame Player API code asynchronously.
    var tag = document.createElement('script');

    tag.src = "https://www.youtube.com/iframe_api";
    var firstScriptTag = document.getElementsByTagName('script')[0];
    firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

    // 3. This function creates an <iframe> (and YouTube player)
    //    after the API code downloads.
    var player;
    function onYouTubeIframeAPIReady() {
        player = new YT.Player('player', {
            height: '768',
            width: '1366',
            //videoId: 'Q6X0mViQNqA',
            playerVars: {
                'autoplay': 1,
                'controls': 1
            },
            events: {
                'onReady': onPlayerReady,
                'onStateChange': onPlayerStateChange
            }
        });
    }

    function getVideo() {
        var mid = AdProvider.getMonitorId();

        return fetch('/content/' + mid + '/youtube').then(response => response.json());
    }


    // 4. The API will call this function when the video player is ready.
    function onPlayerReady(event) {
        setTimeout(() => {
            getVideo().then(videoParams => {
                event.target.cueVideoById(videoParams);
                setTimeout(() => {
                    player.playVideo()
                }, 500);
                //event.target.playVideo();
            })
        }, 3000);

    }


    // 5. The API calls this function when the player's state changes.
    //    The function indicates that when playing a video (state=1),
    //    the player should play for six seconds and then stop.
    function onPlayerStateChange(event) {
        //if (event.data == YT.PlayerState.CUED) {}
        if (event.data == 0) {
            getVideo().then(data => event.target.loadVideoById(data));
        }
        //console.log(event);
    }
    function stopVideo() {
        player.stopVideo();
    }

    AdProvider.play();
</script>
</body>
</html>
